[{"D:\\TestProject\\frontend-test-task\\src\\index.js":"1","D:\\TestProject\\frontend-test-task\\src\\components\\App\\App.js":"2","D:\\TestProject\\frontend-test-task\\src\\components\\Navbar\\index.js":"3","D:\\TestProject\\frontend-test-task\\src\\components\\Navbar\\navbar.js":"4","D:\\TestProject\\frontend-test-task\\src\\components\\Authorization\\index.js":"5","D:\\TestProject\\frontend-test-task\\src\\components\\Authorization\\authorization.js":"6","D:\\TestProject\\frontend-test-task\\src\\Services\\UserService\\index.js":"7","D:\\TestProject\\frontend-test-task\\src\\Services\\UserService\\UserService.js":"8","D:\\TestProject\\frontend-test-task\\src\\components\\Error\\index.js":"9","D:\\TestProject\\frontend-test-task\\src\\components\\Error\\error.js":"10","D:\\TestProject\\frontend-test-task\\src\\components\\CompanyList\\index.js":"11","D:\\TestProject\\frontend-test-task\\src\\components\\CompanyList\\companyList.js":"12","D:\\TestProject\\frontend-test-task\\src\\Services\\CompanyService\\index.js":"13","D:\\TestProject\\frontend-test-task\\src\\Services\\CompanyService\\CompanyService.js":"14","D:\\TestProject\\frontend-test-task\\src\\components\\CompanyList\\RedactModalWindow\\index.js":"15","D:\\TestProject\\frontend-test-task\\src\\components\\CompanyList\\RedactModalWindow\\redactModalWindow.js":"16","D:\\TestProject\\frontend-test-task\\src\\components\\CompanyList\\RemoveModalWindow\\index.js":"17","D:\\TestProject\\frontend-test-task\\src\\components\\CompanyList\\RemoveModalWindow\\removeModalWindow.js":"18","D:\\TestProject\\frontend-test-task\\src\\components\\QuotationList\\quotationList.js":"19","D:\\TestProject\\frontend-test-task\\src\\Services\\QuototationService\\index.js":"20","D:\\TestProject\\frontend-test-task\\src\\Services\\QuototationService\\QuotationService.js":"21","D:\\TestProject\\frontend-test-task\\src\\components\\ChartPage\\index.js":"22","D:\\TestProject\\frontend-test-task\\src\\components\\ChartPage\\chartPage.js":"23","D:\\TestProject\\frontend-test-task\\src\\components\\ChartPage\\Chart\\index.js":"24","D:\\TestProject\\frontend-test-task\\src\\components\\ChartPage\\Chart\\chart.js":"25"},{"size":405,"mtime":1612273495395,"results":"26","hashOfConfig":"27"},{"size":1382,"mtime":1612535397763,"results":"28","hashOfConfig":"27"},{"size":52,"mtime":1612273089790,"results":"29","hashOfConfig":"27"},{"size":4291,"mtime":1612535430879,"results":"30","hashOfConfig":"27"},{"size":73,"mtime":1612280494013,"results":"31","hashOfConfig":"27"},{"size":4082,"mtime":1612536167218,"results":"32","hashOfConfig":"27"},{"size":67,"mtime":1612282699731,"results":"33","hashOfConfig":"27"},{"size":721,"mtime":1612309648589,"results":"34","hashOfConfig":"27"},{"size":49,"mtime":1612291489519,"results":"35","hashOfConfig":"27"},{"size":221,"mtime":1612291478112,"results":"36","hashOfConfig":"27"},{"size":67,"mtime":1612350855513,"results":"37","hashOfConfig":"27"},{"size":4975,"mtime":1612536823736,"results":"38","hashOfConfig":"27"},{"size":76,"mtime":1612359660837,"results":"39","hashOfConfig":"27"},{"size":1475,"mtime":1612536546748,"results":"40","hashOfConfig":"27"},{"size":85,"mtime":1612371403395,"results":"41","hashOfConfig":"27"},{"size":3989,"mtime":1612536446384,"results":"42","hashOfConfig":"27"},{"size":85,"mtime":1612386496110,"results":"43","hashOfConfig":"27"},{"size":1538,"mtime":1612533243680,"results":"44","hashOfConfig":"27"},{"size":2426,"mtime":1612473099939,"results":"45","hashOfConfig":"27"},{"size":82,"mtime":1612463207034,"results":"46","hashOfConfig":"27"},{"size":1064,"mtime":1612536461909,"results":"47","hashOfConfig":"27"},{"size":61,"mtime":1612471725570,"results":"48","hashOfConfig":"27"},{"size":7016,"mtime":1612531491826,"results":"49","hashOfConfig":"27"},{"size":49,"mtime":1612471742961,"results":"50","hashOfConfig":"27"},{"size":4027,"mtime":1612527563967,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1nv3lcx",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"54"},"D:\\TestProject\\frontend-test-task\\src\\index.js",[],["107","108"],"D:\\TestProject\\frontend-test-task\\src\\components\\App\\App.js",[],"D:\\TestProject\\frontend-test-task\\src\\components\\Navbar\\index.js",[],"D:\\TestProject\\frontend-test-task\\src\\components\\Navbar\\navbar.js",["109","110","111","112","113","114"],"D:\\TestProject\\frontend-test-task\\src\\components\\Authorization\\index.js",[],"D:\\TestProject\\frontend-test-task\\src\\components\\Authorization\\authorization.js",["115"],"D:\\TestProject\\frontend-test-task\\src\\Services\\UserService\\index.js",[],"D:\\TestProject\\frontend-test-task\\src\\Services\\UserService\\UserService.js",[],"D:\\TestProject\\frontend-test-task\\src\\components\\Error\\index.js",[],"D:\\TestProject\\frontend-test-task\\src\\components\\Error\\error.js",[],"D:\\TestProject\\frontend-test-task\\src\\components\\CompanyList\\index.js",[],"D:\\TestProject\\frontend-test-task\\src\\components\\CompanyList\\companyList.js",["116"],"D:\\TestProject\\frontend-test-task\\src\\Services\\CompanyService\\index.js",[],"D:\\TestProject\\frontend-test-task\\src\\Services\\CompanyService\\CompanyService.js",[],"D:\\TestProject\\frontend-test-task\\src\\components\\CompanyList\\RedactModalWindow\\index.js",[],"D:\\TestProject\\frontend-test-task\\src\\components\\CompanyList\\RedactModalWindow\\redactModalWindow.js",["117","118","119","120","121"],"import React, {useState, useEffect} from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport 'bootstrap/dist/js/bootstrap.js'\r\nimport './redactModalWindow.css'\r\n\r\nexport default function RedactModalWindow({type, id, name, ticker, changeCompany, addCompany}) {\r\n\r\n    const [companyName, setCompanyName] = useState(name)\r\n    const [companyTicker, setCompanyTicker] = useState(ticker)\r\n    const [buttonClasses, setButtonClasses] = useState(\"btn btn-primary save-button btn-warning first-style-button\")\r\n    const [disabled, setDisabled] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setCompanyName(name)\r\n        setCompanyTicker(ticker)\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        if (companyName.replace(/\\s/g, '').length == 0 || companyTicker.replace(/\\s/g, '').length == 0) {\r\n            setButtonClasses(\"btn btn-primary save-button btn-warning disabled-button\")\r\n            setDisabled(true)\r\n        } else {\r\n            setButtonClasses(\"btn btn-primary save-button btn-warning first-style-button\")\r\n            setDisabled(false)\r\n        }\r\n    }, [companyTicker, companyName])\r\n\r\n    const onCompanyNameChanged = (event) => {\r\n        setCompanyName(event.target.value)\r\n    }\r\n\r\n    const onCompanyTickerChanged = (event) => {\r\n        setCompanyTicker(event.target.value)\r\n    }\r\n\r\n    const onRedactSubmit = (event) => {\r\n        event.preventDefault()\r\n        changeCompany(id, companyName, companyTicker)\r\n    }\r\n\r\n    const onAddSubmit = (event) => {\r\n        event.preventDefault()\r\n        addCompany(id, companyName, companyTicker)\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal fade\" id=\"redactModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\"\r\n             aria-hidden=\"true\" data-toggle=\"modal\">\r\n            <div className=\"modal-dialog\" role=\"document\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-body\">\r\n                        <h2 className='modalWindowHeader'>{type == 'redact' ? 'Редактирование компании' : 'Добавление компании'}</h2>\r\n                        <form>\r\n                            <div className=\"form-group\">\r\n                                <label className='input-label-name'>Название компании</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    value={companyName}\r\n                                    onChange={onCompanyNameChanged}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className='input-label-ticker'>Тикер</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control companyTicker-input\"\r\n                                    value={companyTicker}\r\n                                    onChange={onCompanyTickerChanged}\r\n                                />\r\n                            </div>\r\n                            <button type=\"submit\" className={buttonClasses} disabled={disabled}\r\n                                    onClick={type == 'redact' ? onRedactSubmit : onAddSubmit}\r\n                            data-dismiss={'modal'}>Сохранить\r\n                            </button>\r\n                            <button\r\n                                type='button'\r\n                                className=\"btn btn-primary cancel-button btn-warning second-style-button\"\r\n                                aria-label=\"Close\"\r\n                                data-dismiss=\"modal\"\r\n                            >Отменить\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\TestProject\\frontend-test-task\\src\\components\\CompanyList\\RemoveModalWindow\\index.js",[],"D:\\TestProject\\frontend-test-task\\src\\components\\CompanyList\\RemoveModalWindow\\removeModalWindow.js",[],"D:\\TestProject\\frontend-test-task\\src\\components\\QuotationList\\quotationList.js",["122"],"import React, {useState, useEffect} from 'react'\r\nimport Navbar from \"../Navbar\";\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport 'bootstrap/dist/js/bootstrap.js'\r\nimport './quototations.css'\r\nimport QuotationService from \"../../Services/QuototationService\";\r\n\r\nexport default function QuotationList() {\r\n\r\n    const quotationService = new QuotationService()\r\n\r\n    const [quotations, setQuotations] = useState([])\r\n\r\n    useEffect(() => {\r\n        quotationService.getLastQuotations()\r\n            .then(response => {\r\n                console.log(response.data)\r\n                setQuotations(response.data)\r\n            })\r\n            .catch((ex) => {\r\n                console.log(ex.message)\r\n            })\r\n    }, [])\r\n\r\n    const dataFormat = (data) => {\r\n        return data.substring(8, 10) + '.' + data.substring(5, 7) + '.' + data.substring(2, 4)\r\n    }\r\n\r\n    const row = () => {\r\n        return quotations.map(item => {\r\n            return (\r\n                <tr key={item.ticker}>\r\n                    <th scope=\"row\" className=\"quotes-table-company-name\">{item.companyName}</th>\r\n                    <td>{item.ticker}</td>\r\n                    <td>{item.price.toFixed(2)}\r\n                        <div\r\n                            className=\"quotes-table-rub\"> {item.currencyUnit === 'SUR' ? 'RUB' : item.currencyUnit}\r\n                        </div>\r\n                    </td>\r\n                    <td>{dataFormat(item.date)}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar/>\r\n            <div className=\"quotes-page\">\r\n                <div className=' quotes-table'>\r\n                    <h1 className=\"quotes\">Котировки</h1>\r\n                    <table className=\"table quote-table-area\">\r\n                        <thead>\r\n                        <tr className=\"quotes-table-head\">\r\n                            <th scope=\"col\" className=\"quotes-table-company-name\">Компания</th>\r\n                            <th scope=\"col\">Тикер</th>\r\n                            <th scope=\"col\">Цена</th>\r\n                            <th scope=\"col\">Дата</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {row()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\TestProject\\frontend-test-task\\src\\Services\\QuototationService\\index.js",[],"D:\\TestProject\\frontend-test-task\\src\\Services\\QuototationService\\QuotationService.js",[],"D:\\TestProject\\frontend-test-task\\src\\components\\ChartPage\\index.js",[],"D:\\TestProject\\frontend-test-task\\src\\components\\ChartPage\\chartPage.js",["123","124","125","126"],"import React, {useState, useEffect} from \"react\";\r\nimport Chart from \"./Chart\";\r\nimport Navbar from \"../Navbar\";\r\nimport QuotationService from \"../../Services/QuototationService\";\r\nimport './chartPage.css'\r\n\r\n\r\nexport default function ChartPage() {\r\n\r\n    const quotationService = new QuotationService()\r\n\r\n    const [quotations, setQuotations] = useState([])\r\n\r\n    const [dateType, setDateType] = useState('1w')\r\n\r\n    const [currentQuotation, setCurrentQuotation] = useState({\r\n        ticker: '',\r\n        name: '',\r\n        date: '',\r\n        price: '',\r\n        currencyUnit: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        quotationService.getLastQuotations()\r\n            .then(response => {\r\n                setQuotations(response.data)\r\n                setCurrentQuotation(response.data[0])\r\n                choseCurrentQuotation(response.data[0].ticker, response.data[0].companyName,\r\n                    response.data[0].date, response.data[0].price, response.data[0].currencyUnit)\r\n            })\r\n    }, [])\r\n\r\n    const dataFormat = (data) => {\r\n        return data.substring(8, 10) + '.' + data.substring(5, 7) + '.' + data.substring(2, 4)\r\n    }\r\n\r\n    const choseCurrentQuotation = (ticker, name, date, price, currencyUnit) => {\r\n        console.log('current ticker ', ticker)\r\n        console.log('items: ', ticker, ' ', name, ' ', date, ' ', price)\r\n        setCurrentQuotation({\r\n            ticker,\r\n            name,\r\n            date,\r\n            price,\r\n            currencyUnit\r\n        })\r\n    }\r\n\r\n    const row = () => {\r\n        return quotations.map(item => {\r\n            return (\r\n                <tr className={item.ticker === currentQuotation.ticker ? 'row-quote-chart active-row' : 'row-quote-chart'}\r\n                    key={item.ticker}\r\n                    onClick={() => choseCurrentQuotation(item.ticker, item.companyName, item.date, item.price, item.currencyUnit)}>\r\n                    <th className={'ticker-chart'} scope=\"row\">{item.ticker}</th>\r\n                    <th>\r\n                        {item.price}\r\n                        <div\r\n                            className={\"quotes-table-rub\"}> {item.currencyUnit === 'SUR' ? 'RUB' : item.currencyUnit}\r\n                        </div>\r\n                    </th>\r\n\r\n                    <th>{dataFormat(item.date)}</th>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    const oneMoreDateFormat = (date) => {\r\n\r\n        const day = date.substring(0, 1) == '0' ? date.substring(1, 2) : date.substring(0, 1)\r\n        let month;\r\n        switch (date.substring(3, 5)) {\r\n            case '01':\r\n                month = 'января'\r\n                break;\r\n            case '02':\r\n                month = 'февраля'\r\n                break;\r\n            case '03':\r\n                month = 'марта'\r\n                break;\r\n            case '04':\r\n                month = 'апреля'\r\n                break;\r\n            case '05':\r\n                month = 'мая'\r\n                break;\r\n            case '06':\r\n                month = 'июня'\r\n                break;\r\n            case '07':\r\n                month = 'июля'\r\n                break;\r\n            case '08':\r\n                month = 'августа'\r\n                break;\r\n            case '09':\r\n                month = 'сентября'\r\n                break;\r\n            case '10':\r\n                month = 'октября'\r\n                break;\r\n            case '11':\r\n                month = 'ноября'\r\n                break;\r\n            case '12':\r\n                month = 'декабрая'\r\n                break;\r\n        }\r\n\r\n        return day + ' ' + month + ' ' + '20' + date.substring(6, 8)\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar/>\r\n            <div className={'chart-page'}>\r\n                <div className={'chart-block'}>\r\n                    <div className={'words'}>\r\n                        <div className={'chart-company-name'}>\r\n                            {currentQuotation.name}\r\n                        </div>\r\n                        <div className={'chart-company-ticker'}>\r\n                            ({currentQuotation.ticker})\r\n                        </div>\r\n                        <div>\r\n                            <div className={'chart-company-price'}>\r\n                                {currentQuotation.price}\r\n                            </div>\r\n                            <div className={'chart-company-currencyUnit'}>\r\n                                {currentQuotation.currencyUnit === 'SUR' ? 'RUB' : currentQuotation.currencyUnit}\r\n                            </div>\r\n                            <div className={'chart-company-date'}>\r\n                                {oneMoreDateFormat(dataFormat(currentQuotation.date))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Chart\r\n                        ticker={currentQuotation.ticker}\r\n                        time={dateType}\r\n                    />\r\n                    <div className={'buttons-chart'}>\r\n                        <button className={'btn btn-warning btn-chart'} onClick={() => setDateType('5m')}>5 минут\r\n                        </button>\r\n                        <button className={'btn btn-warning btn-chart'} onClick={() => setDateType('1h')}>1 час</button>\r\n                        <button className={'btn btn-warning btn-chart'} onClick={() => setDateType('4h')}>4 часа\r\n                        </button>\r\n                        <button className={'btn btn-warning btn-chart'} onClick={() => setDateType('1w')}>1 день\r\n                        </button>\r\n                        <button className={'btn btn-warning btn-chart'} onClick={() => setDateType('1m')}>1 неделя\r\n                        </button>\r\n                        <button className={'btn btn-warning btn-chart'} onClick={() => setDateType('1y')}>1 месяц\r\n                        </button>\r\n                        <button className={'btn btn-warning btn-chart'}>1 год</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"quotes-page-chart\">\r\n                    <div className='quotes-table-chart'>\r\n                        <table className=\"table quote-table-area-chart\">\r\n                            <thead>\r\n                            <tr className=\"quotes-table-head\">\r\n                                <th className={'talbe-head '} scope=\"col\">Тикер</th>\r\n                                <th className={'talbe-head '} scope=\"col\">Цена</th>\r\n                                <th className={'talbe-head '} scope=\"col\">Дата</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {row()}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\TestProject\\frontend-test-task\\src\\components\\ChartPage\\Chart\\index.js",[],"D:\\TestProject\\frontend-test-task\\src\\components\\ChartPage\\Chart\\chart.js",["127","128","129","130"],"import React, {useEffect, useState} from \"react\";\r\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,} from \"recharts\";\r\nimport QuotationService from \"../../../Services/QuototationService\";\r\nimport {forEach} from \"react-bootstrap/ElementChildren\";\r\n\r\nexport default function Chart({ticker, time}) {\r\n\r\n    const quotationService = new QuotationService()\r\n\r\n    const [quotations, setQuotations] = useState([])\r\n\r\n    const [data, setData] = useState([])\r\n\r\n    const dataFormat = (data) => {\r\n        return data.substring(8, 10) + '.' + data.substring(5, 7) + '.' + data.substring(2, 4)\r\n    }\r\n\r\n    const setDataToChart = (startYear, startMonth, startDay, startHours, startMinutes, startSeconds) => {\r\n\r\n\r\n        const startDate = new Date(startYear,\r\n            startMonth,\r\n            startDay,\r\n            startHours,\r\n            startMinutes,\r\n            startSeconds)\r\n\r\n        const endDate = new Date()\r\n\r\n        console.log(startDate, ' ', endDate)\r\n\r\n        const dataChart = []\r\n\r\n        quotationService.getQuotationByTickerAndDate(ticker, startDate, endDate)\r\n            .then((response) => {\r\n                console.log(response.data)\r\n\r\n                response.data.forEach(item => {\r\n                    dataChart.push({\r\n                        name: dataFormat(item.date),\r\n                        price: item.price\r\n                    })\r\n                })\r\n\r\n                setData(dataChart)\r\n\r\n                setQuotations(response.data)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (ticker && ticker.length > 0) {\r\n\r\n            const date = new Date()\r\n\r\n            if (time === '5m') {\r\n                console.log('5m')\r\n\r\n                setDataToChart(date.getFullYear(),\r\n                    date.getMonth(),\r\n                    date.getDay(),\r\n                    date.getHours(),\r\n                    date.getMinutes() - 5,\r\n                    date.getSeconds())\r\n\r\n            } else if (time === '1h') {\r\n\r\n                setDataToChart(date.getFullYear(),\r\n                    date.getMonth(),\r\n                    date.getDay(),\r\n                    date.getHours() - 1,\r\n                    date.getMinutes(),\r\n                    date.getSeconds())\r\n\r\n            } else if (time === '4h') {\r\n\r\n                setDataToChart(date.getFullYear(),\r\n                    date.getMonth(),\r\n                    date.getDay(),\r\n                    date.getHours() - 4,\r\n                    date.getMinutes(),\r\n                    date.getSeconds())\r\n\r\n            } else if (time === '1w') {\r\n\r\n                setDataToChart(date.getFullYear(),\r\n                    date.getMonth(),\r\n                    date.getDay() - 7,\r\n                    date.getHours(),\r\n                    date.getMinutes(),\r\n                    date.getSeconds())\r\n\r\n            } else if (time === '1m') {\r\n\r\n                setDataToChart(date.getFullYear(),\r\n                    date.getMonth() - 1,\r\n                    date.getDay(),\r\n                    date.getHours(),\r\n                    date.getMinutes(),\r\n                    date.getSeconds())\r\n\r\n            } else if (time === '1y') {\r\n\r\n                setDataToChart(date.getFullYear() - 1,\r\n                    date.getMonth(),\r\n                    date.getDay(),\r\n                    date.getHours(),\r\n                    date.getMinutes(),\r\n                    date.getSeconds())\r\n\r\n            }\r\n        }\r\n\r\n    }, [ticker, time])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <LineChart\r\n                width={650}\r\n                height={300}\r\n                data={data}\r\n                margin={{\r\n                    top: 0, right: 0, left: 0, bottom: 0,\r\n                }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                <XAxis dataKey=\"name\"/>\r\n                <YAxis/>\r\n                <Tooltip/>\r\n                <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" fill=\"#8884d8\"/>\r\n            </LineChart>\r\n        </div>\r\n    )\r\n}",{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":1,"column":16,"nodeType":"137","messageId":"138","endLine":1,"endColumn":25},{"ruleId":"135","severity":1,"message":"139","line":10,"column":18,"nodeType":"137","messageId":"138","endLine":10,"endColumn":25},{"ruleId":"140","severity":1,"message":"141","line":24,"column":21,"nodeType":"142","endLine":27,"endColumn":67},{"ruleId":"140","severity":1,"message":"143","line":47,"column":25,"nodeType":"142","endLine":47,"endColumn":70},{"ruleId":"140","severity":1,"message":"141","line":52,"column":25,"nodeType":"142","endLine":52,"endColumn":55},{"ruleId":"140","severity":1,"message":"141","line":57,"column":25,"nodeType":"142","endLine":57,"endColumn":93},{"ruleId":"135","severity":1,"message":"136","line":1,"column":26,"nodeType":"137","messageId":"138","endLine":1,"endColumn":35},{"ruleId":"144","severity":1,"message":"145","line":27,"column":8,"nodeType":"146","endLine":27,"endColumn":10,"suggestions":"147"},{"ruleId":"144","severity":1,"message":"148","line":16,"column":8,"nodeType":"146","endLine":16,"endColumn":12,"suggestions":"149"},{"ruleId":"150","severity":1,"message":"151","line":19,"column":51,"nodeType":"152","messageId":"153","endLine":19,"endColumn":53},{"ruleId":"150","severity":1,"message":"151","line":19,"column":99,"nodeType":"152","messageId":"153","endLine":19,"endColumn":101},{"ruleId":"150","severity":1,"message":"151","line":52,"column":65,"nodeType":"152","messageId":"153","endLine":52,"endColumn":67},{"ruleId":"150","severity":1,"message":"151","line":73,"column":51,"nodeType":"152","messageId":"153","endLine":73,"endColumn":53},{"ruleId":"144","severity":1,"message":"154","line":23,"column":8,"nodeType":"146","endLine":23,"endColumn":10,"suggestions":"155"},{"ruleId":"144","severity":1,"message":"154","line":32,"column":8,"nodeType":"146","endLine":32,"endColumn":10,"suggestions":"156"},{"ruleId":"150","severity":1,"message":"151","line":72,"column":42,"nodeType":"152","messageId":"153","endLine":72,"endColumn":44},{"ruleId":"157","severity":1,"message":"158","line":74,"column":9,"nodeType":"159","messageId":"160","endLine":111,"endColumn":10},{"ruleId":"161","severity":1,"message":"162","line":113,"column":40,"nodeType":"152","messageId":"163","endLine":113,"endColumn":41},{"ruleId":"135","severity":1,"message":"164","line":2,"column":64,"nodeType":"137","messageId":"138","endLine":2,"endColumn":70},{"ruleId":"135","severity":1,"message":"165","line":4,"column":9,"nodeType":"137","messageId":"138","endLine":4,"endColumn":16},{"ruleId":"135","severity":1,"message":"166","line":10,"column":12,"nodeType":"137","messageId":"138","endLine":10,"endColumn":22},{"ruleId":"144","severity":1,"message":"167","line":114,"column":8,"nodeType":"146","endLine":114,"endColumn":22,"suggestions":"168"},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setName' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'companyService'. Either include it or remove the dependency array.","ArrayExpression",["171"],"React Hook useEffect has missing dependencies: 'name' and 'ticker'. Either include them or remove the dependency array. If 'setCompanyName' needs the current value of 'name', you can also switch to useReducer instead of useState and read 'name' in the reducer.",["172"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'quotationService'. Either include it or remove the dependency array.",["173"],["174"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'Legend' is defined but never used.","'forEach' is defined but never used.","'quotations' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setDataToChart'. Either include it or remove the dependency array.",["175"],"no-global-assign","no-unsafe-negation",{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"180","fix":"182"},{"desc":"183","fix":"184"},"Update the dependencies array to be: [companyService]",{"range":"185","text":"186"},"Update the dependencies array to be: [id, name, ticker]",{"range":"187","text":"188"},"Update the dependencies array to be: [quotationService]",{"range":"189","text":"190"},{"range":"191","text":"190"},"Update the dependencies array to be: [setDataToChart, ticker, time]",{"range":"192","text":"193"},[789,791],"[companyService]",[660,664],"[id, name, ticker]",[723,725],"[quotationService]",[1016,1018],[3454,3468],"[setDataToChart, ticker, time]"]